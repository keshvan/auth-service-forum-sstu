// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	authresponse "github.com/keshvan/auth-service-sstu-forum/internal/controller/response/auth_response.go"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// IsSessionActive provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUsecase) IsSessionActive(ctx context.Context, refreshToken string) (*authresponse.IsSessionActiveResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for IsSessionActive")
	}

	var r0 *authresponse.IsSessionActiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*authresponse.IsSessionActiveResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *authresponse.IsSessionActiveResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authresponse.IsSessionActiveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password, refreshToken
func (_m *AuthUsecase) Login(ctx context.Context, username string, password string, refreshToken string) (*authresponse.LoginResponse, error) {
	ret := _m.Called(ctx, username, password, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *authresponse.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*authresponse.LoginResponse, error)); ok {
		return rf(ctx, username, password, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *authresponse.LoginResponse); ok {
		r0 = rf(ctx, username, password, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authresponse.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, password, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUsecase) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUsecase) Refresh(ctx context.Context, refreshToken string) (*authresponse.RefreshResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *authresponse.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*authresponse.RefreshResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *authresponse.RefreshResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authresponse.RefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, username, role, password
func (_m *AuthUsecase) Register(ctx context.Context, username string, role string, password string) (*authresponse.RegisterResponse, error) {
	ret := _m.Called(ctx, username, role, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *authresponse.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*authresponse.RegisterResponse, error)); ok {
		return rf(ctx, username, role, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *authresponse.RegisterResponse); ok {
		r0 = rf(ctx, username, role, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authresponse.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, role, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
